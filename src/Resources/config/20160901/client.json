{
    "name": "Foursquare Client",
    "apiVersion": "20160901",
    "description": "Guzzle service description for Foursquare API",
    "baseUrl": "https://api.foursquare.com/v2/",
    "models": {
        "getResponse": {
            "type": "object",
            "additionalProperties": {
                "location": "json"
            }
        }
    },
    "operations": {
        "abstract.foursquare": {
            "parameters": {
                "client_id": {
                    "location": "query",
                    "description": "App client ID",
                    "required": true
                },
                "client_secret": {
                    "location": "query",
                    "description": "App client secret",
                    "required": true
                } ,
                "m": {
                    "location": "query",
                    "description": "Mode",
                    "required": true
                },
                "v": {
                    "location": "query",
                    "description": "API version",
                    "required": true
                }
            }
        },
        "users": {
            "extends" : "abstract.foursquare",
            "description": "Returns profile information for a given user, including selected badges and mayorships. The web profile for a user is visible at https://foursquare.com/user/USER_ID ",
            "httpMethod": "GET",
            "parameters": {
                "user_id": {
                    "description": "Identity of the user to get details for. Pass self to get details of the acting user.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "users/{user_id}",
            "responseModel": "getResponse"
        },
        "users/requests": {
            "extends" : "abstract.foursquare",
            "description": "Shows a user the list of users with whom they have a pending friend request (i.e., someone tried to add the acting user as a friend, but the acting user has not accepted).",
            "httpMethod": "GET",
            "uri": "users/requests",
            "responseModel": "getResponse"
        },
        "users/search": {
            "extends" : "abstract.foursquare",
            "description": "Helps a user locate friends.",
            "httpMethod": "GET|POST",
            "parameters": {
                "phone": {
                    "description": "A comma-delimited list of phone numbers to look for.",
                    "location": "query"
                },
                "email": {
                    "description": "A comma-delimited list of email addresses to look for.",
                    "location": "query"
                },
                "twitter": {
                    "description": "A comma-delimited list of Twitter handles to look for.",
                    "location": "query"
                },
                "twitterSource": {
                    "description": "A single Twitter handle. Results will be users that this handle follows on Twitter who use Foursquare.",
                    "location": "query"
                },
                "fbid": {
                    "description": "A comma-delimited list of Facebook ID's to look for.",
                    "location": "query"
                },
                "name": {
                    "description": "A single string to search for in users' names.",
                    "location": "query"
                },
                "onlyPages": {
                    "default": false,
                    "description": "Indicates whether to only return pages. This replaces the functionality of the old dedicated pages/search endpoint.",
                    "location": "query"
                }
            },
            "uri": "users/search",
            "responseModel": "getResponse"
        },
        "users/checkins": {
            "extends": "users",
            "description": "Returns a history of checkins for the authenticated user.",
            "parameters": {
                "limit": {
                    "description": "Number of results to return, up to 250.",
                    "location": "query"
                },
                "offset": {
                    "description": "The number of results to skip. Used to page through results.",
                    "location": "query"
                },
                "sort": {
                    "description": "How to sort the returned checkins. Can be newestfirst or oldestfirst.",
                    "location": "query"
                },
                "afterTimestamp": {
                    "description": "Retrieve the first results to follow these seconds since epoch. This should be useful for paging forward in time, or when polling for changes. To avoid missing results when polling, we recommend subtracting several seconds from the last poll time and then de-duplicating.",
                    "location": "query"
                },
                "beforeTimestamp": {
                    "description": "Retrieve the first results prior to these seconds since epoch. Useful for paging backward in time.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/checkins",
            "responseModel": "getResponse"
        },
        "users/friends": {
            "extends": "users",
            "description": "Returns an array of a user's friends.",
            "parameters": {
                "limit": {
                    "description": "Number of results to return, up to 500.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/friends",
            "responseModel": "getResponse"
        },
        "users/lists": {
            "extends": "users",
            "description": "A User's Lists.",
            "parameters": {
                "group": {
                    "description": "can be created (lists created by this user), edited (other people's lists this user has edited), followed (lists this user follows), friends (lists from this user's friends), and suggested (lists relevant to the user's current location).",
                    "location": "query"
                },
                "ll": {
                    "description": "Location of the user, required in order to receive the suggested group.",
                    "location": "query"
                },
                "limit": {
                    "description": "Number of results to return, up to 200.",
                    "location": "query"
                },
                "offset": {
                    "description": "The number of results to skip. Used to page through results.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/lists",
            "responseModel": "getResponse"
        },
        "users/mayorships": {
            "extends": "users",
            "description": "Returns a user's mayorships.",
            "uri": "users/{user_id}/mayorships",
            "responseModel": "getResponse"
        },
        "users/photos": {
            "extends": "users",
            "description": "Returns photos from a user.",
            "parameters": {
                "limit": {
                    "description": "Number of results to return, up to 500.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/photos",
            "responseModel": "getResponse"
        },
        "users/tastes": {
            "extends": "users",
            "description": "Returns a list of a user's Foursquare tastes.",
            "uri": "users/{user_id}/tastes",
            "responseModel": "getResponse"
        },
        "users/tips": {
            "extends": "users",
            "deprecated": true,
            "description": "Returns tips from a user.",
            "parameters": {
                "sort": {
                    "description": "One of recent, nearby, or popular. Nearby requires geolat and geolong to be provided.",
                    "location": "query"
                },
                "ll": {
                    "description": "Latitude and longitude of the user's location.",
                    "location": "query"
                },
                "limit": {
                    "description": "Number of results to return, up to 500.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/tips",
            "responseModel": "getResponse"
        },
        "users/venuelikes": {
            "extends": "users",
            "deprecated": true,
            "description": "Returns a list of venues liked by the specified user",
            "parameters": {
                "beforeTimestamp": {
                    "description": "Seconds since epoch.",
                    "location": "query"
                },
                "afterTimestamp": {
                    "description": "Seconds since epoch.",
                    "location": "query"
                },
                "categoryId": {
                    "description": "Limits returned venues to those in this category. If specifying a top-level category, all sub-categories will also match the query.",
                    "location": "query"
                },
                "limit": {
                    "description": "Number of results to return.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/venuelikes",
            "responseModel": "getResponse"
        },
        "users/venuehistory": {
            "extends": "users",
            "description": "Returns a list of all venues visited by the specified user, along with how many visits and when they were last there.",
            "parameters": {
                "beforeTimestamp": {
                    "description": "Seconds since epoch.",
                    "location": "query"
                },
                "afterTimestamp": {
                    "description": "Seconds after epoch.",
                    "location": "query"
                },
                "categoryId": {
                    "description": "Limits returned venues to those in this category. If specifying a top-level category, all sub-categories will also match the query.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/venuehistory",
            "responseModel": "getResponse"
        },
        "users/approve": {
            "extends": "users",
            "description": "Approves a pending friend request from another user.",
            "httpMethod": "POST",
            "uri": "users/{user_id}/approve",
            "responseModel": "getResponse"
        },
        "users/deny": {
            "extends": "users",
            "description": "Denies a pending friend request from another user.",
            "httpMethod": "POST",
            "uri": "users/{user_id}/deny",
            "responseModel": "getResponse"
        },
        "users/setpings": {
            "extends": "users",
            "description": "Changes whether the acting user will receive pings (phone notifications) when the specified user checks in.",
            "httpMethod": "POST",
            "parameters": {
                "value": {
                    "description": "True or false.",
                    "location": "postField",
                    "required": true
                }
            },
            "uri": "users/{user_id}/setpings",
            "responseModel": "getResponse"
        },
        "users/unfriend": {
            "extends": "users",
            "description": "Cancels any relationship between the acting user and the specified user. ",
            "httpMethod": "POST",
            "uri": "users/{user_id}/unfriend",
            "responseModel": "getResponse"
        },
        "users/update": {
            "extends" : "abstract.foursquare",
            "description": "Updates the user's profile photo.",
            "httpMethod": "POST",
            "parameters": {
                "photo": {
                    "description": "Photo under 100KB in multipart MIME encoding with content type image/jpeg, image/gif, or image/png.",
                    "location": "postField"
                }
            },
            "uri": "users/self/update",
            "responseModel": "getResponse"
        },
        "venues": {
            "extends" : "abstract.foursquare",
            "description": "Gives details about a venue, including location, mayorship, tags, tips, specials, and category. ",
            "httpMethod": "GET",
            "parameters": {
                "venue_id": {
                    "description": "ID of venue to retrieve",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "venues/{venue_id}",
            "responseModel": "getResponse"
        },
        "venues/add": {
            "extends" : "abstract.foursquare",
            "description": "Allows users to add a new venue.",
            "httpMethod": "POST",
            "parameters": {
                "name": {
                    "description": "the name of the venue",
                    "location": "query",
                    "required": true
                },
                "address": {
                    "description": "The address of the venue.",
                    "location": "postField"
                },
                "crossStreet": {
                    "description": "The nearest intersecting street or streets.",
                    "location": "postField"
                },
                "city": {
                    "description": "The city name where this venue is.",
                    "location": "postField"
                },
                "state": {
                    "description": "The nearest state or province to the venue.",
                    "location": "postField"
                },
                "zip": {
                    "description": "The zip or postal code for the venue.",
                    "location": "postField"
                },
                "phone": {
                    "description": "The phone number of the venue.",
                    "location": "postField"
                },
                "twitter": {
                    "description": "The twitter handle of the venue.",
                    "location": "postField"
                },
                "ll": {
                    "description": "Latitude and longitude of the venue, as accurate as is known.",
                    "location": "postField",
                    "required": true
                },
                "primaryCategoryId": {
                    "description": "The ID of the category to which you want to assign this venue.",
                    "location": "postField"
                },
                "description": {
                    "description": "A freeform description of the venue, up to 300 characters.",
                    "location": "postField"
                },
                "url": {
                    "description": "The url of the homepage of the venue.",
                    "location": "postField"
                },
                "ignoreDuplicates": {
                    "description": "A boolean flag telling the server to ignore duplicates and force the addition of this venue.",
                    "location": "postField"
                },
                "ignoreDuplicateKey": {
                    "description": "equired if ignoreDuplicates is true. This key will be available in the response of the HTTP 409 error of the first (failed) attempt to add venue.",
                    "location": "postField"
                }
            },
            "uri": "venues/add",
            "responseModel": "getResponse"
        },
        "venues/categories": {
            "extends" : "abstract.foursquare",
            "description": "Returns a hierarchical list of categories applied to venues.",
            "httpMethod": "GET",
            "uri": "venues/categories",
            "responseModel": "getResponse"
        },
        "venues/explore": {
            "extends" : "abstract.foursquare",
            "description": "Returns a list of recommended venues near the current location. ",
            "httpMethod": "GET",
            "parameters": {
                "ll": {
                    "description": "required unless near is provided. Latitude and longitude of the user's location.",
                    "location": "query"
                },
                "near": {
                    "description": "required unless ll is provided. A string naming a place in the world. If the near string is not geocodable, returns a failed_geocode error. Otherwise, searches within the bounds of the geocode and adds a geocode object to the response.",
                    "location": "query"
                },
                "llAcc": {
                    "description": "Accuracy of latitude and longitude, in meters.",
                    "location": "query"
                },
                "alt": {
                    "description": "Altitude of the user's location, in meters.",
                    "location": "query"
                },
                "altAcc": {
                    "description": "Accuracy of the user's altitude, in meters.",
                    "location": "query"
                },
                "radius": {
                    "description": "Radius to search within, in meters. If radius is not specified, a suggested radius will be used based on the density of venues in the area.",
                    "location": "query"
                },
                "section": {
                    "description": "One of food, drinks, coffee, shops, arts, outdoors, sights, trending or specials, nextVenues (venues frequently visited after a given venue), or topPicks (a mix of recommendations generated without a query from the user). Choosing one of these limits results to venues with the specified category or property.",
                    "location": "query"
                },
                "query": {
                    "description": "A term to be searched against a venue's tips, category, etc. The query parameter has no effect when a section is specified.",
                    "location": "query"
                },
                "limit": {
                    "description": "Number of results to return, up to 50.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                },
                "novelty": {
                    "description": "Pass new or old to limit results to places the acting user hasn't been or has been, respectively. Omitting this parameter returns a mixture of old and new venues.",
                    "location": "query"
                },
                "friendVisits": {
                    "description": "Pass visited or notvisited to limit results to places the acting user's friends have or haven't been, respectively. Omitting this parameter returns a mixture of venues to which the user's friends have or haven't been.",
                    "location": "query"
                },
                "time": {
                    "description": "Pass any to retrieve results for any time of day. Omitting this parameter returns results targeted to the current time of day.",
                    "location": "query"
                },
                "day": {
                    "description": "Pass any to retrieve results for any day of the week. Omitting this parameter returns results targeted to the current day of the week.",
                    "location": "query"
                },
                "venuePhotos": {
                    "description": "Boolean flag to include a photo in the response for each venue, if one is available. Default is 0 (no photos). Photos are returned as part of the venue JSON object.",
                    "location": "query"
                },
                "lastVenue": {
                    "description": "A venue ID to use in combination with the intent=nextVenues parameter, which returns venues users often visit after a given venue. If intent=nextVenues is specified but lastVenue is not, the user's last check-in will be used if it is within 2 hours. If the user has not checked in within the last 2 hours, no results will be returned.",
                    "location": "query"
                },
                "openNow": {
                    "description": "Boolean flag to only include venues that are open now. This prefers official provider hours but falls back to popular check-in hours.",
                    "location": "query"
                },
                "sortByDistance": {
                    "description": "Boolean flag to sort the results by distance instead of relevance.",
                    "location": "query"
                },
                "price": {
                    "description": "Comma separated list of price points. Currently the valid range of price points are [1,2,3,4], 1 being the least expensive, 4 being the most expensive. For food venues, in the United States, 1 is < $10 an entree, 2 is $10-$20 an entree, 3 is $20-$30 an entree, 4 is > $30 an entree.",
                    "location": "query"
                },
                "saved": {
                    "description": "Boolean flag to only include venues that the user has saved on their To-Do list or to another list.",
                    "location": "query"
                },
                "specials": {
                    "description": "Boolean flag to only include venues that have a special.",
                    "location": "query"
                }
            },
            "uri": "venues/explore",
            "responseModel": "getResponse"
        },
        "venues/managed": {
            "extends" : "abstract.foursquare",
            "description": "Get a list of venues the current user manages.",
            "httpMethod": "GET",
            "parameters": {
                "limit": {
                    "description": "Number of managed venues to return. Defaults to 100, maximum is 1000.",
                    "location": "query"
                },
                "offset": {
                    "description": "Number of venues to skip over for paging. Defaults to 0.",
                    "location": "query"
                }
            },
            "uri": "venues/managed",
            "responseModel": "getResponse"
        },
        "venues/search": {
            "extends" : "abstract.foursquare",
            "description": "Returns a list of venues near the current location, optionally matching a search term. ",
            "httpMethod": "GET",
            "parameters": {
                "ll": {
                    "description": "required unless near is provided. Latitude and longitude of the user's location. (Required for query searches). Optional if using intent=global",
                    "location": "query"
                },
                "near": {
                    "description": "required unless ll is provided. A string naming a place in the world. If the near string is not geocodable, returns a failed_geocode error. Otherwise, searches within the bounds of the geocode. Adds a geocode object to the response. (Required for query searches)",
                    "location": "query"
                },
                "llAcc": {
                    "description": "Accuracy of latitude and longitude, in meters. (Does not currently affect search results.)",
                    "location": "query"
                },
                "alt": {
                    "description": "Altitude of the user's location, in meters. (Does not currently affect search results.)",
                    "location": "query"
                },
                "altAcc": {
                    "description": "Accuracy of the user's altitude, in meters. (Does not currently affect search results.)",
                    "location": "query"
                },
                "query": {
                    "description": "A search term to be applied against venue names.",
                    "location": "query"
                },
                "limit": {
                    "description": "Number of results to return, up to 50.",
                    "location": "query"
                },
                "intent": {
                    "description": "One of the values below, indicating your intent in performing the search. If no value is specified, defaults to checkin.",
                    "location": "query"
                },
                "radius": {
                    "description": "Limit results to venues within this many meters of the specified location. Defaults to a city-wide area. Only valid for requests with intent=browse, or requests with intent=checkin and categoryId or query. Does not apply to match intent requests. The maximum supported radius is currently 100,000 meters.",
                    "location": "query"
                },
                "sw": {
                    "description": "With ne, limits results to the bounding quadrangle defined by the latitude and longitude given by sw as its south-west corner, and ne as its north-east corner. The bounding quadrangle is only supported for intent=browse searches. Not valid with ll or radius. Bounding quadrangles with an area up to approximately 10,000 square kilometers are supported.",
                    "location": "query"
                },
                "ne": {
                    "description": "See sw",
                    "location": "query"
                },
                "categoryId": {
                    "description": "A comma separated list of categories to limit results to. If you specify categoryId specifying a radius may improve results. If specifying a top-level category, all sub-categories will also match the query. Does not apply to match intent requests.",
                    "location": "query"
                },
                "url": {
                    "description": "A third-party URL which we will attempt to match against our map of venues to URLs.",
                    "location": "query"
                },
                "providerId": {
                    "description": "Identifier for a known third party that is part of our map of venues to URLs, used in conjunction with linkedId.",
                    "location": "query"
                },
                "linkedId": {
                    "description": "1002207971611 Identifier used by third party specified in providerId, which we will attempt to match against our map of venues to URLs.",
                    "location": "query"
                }
            },
            "uri": "venues/search",
            "responseModel": "getResponse"
        },
        "venues/suggestcompletion": {
            "extends" : "abstract.foursquare",
            "description": "Returns a list of mini-venues partially matching the search term, near the location.",
            "httpMethod": "GET",
            "parameters": {
                "ll": {
                    "description": "Latitude and longitude of the user's location. (Required for query searches)",
                    "location": "query",
                    "required": true
                },
                "llAcc": {
                    "description": "Accuracy of latitude and longitude, in meters. (Does not currently affect search results.)",
                    "location": "query"
                },
                "alt": {
                    "description": "Altitude of the user's location, in meters. (Does not currently affect search results.)",
                    "location": "query"
                },
                "altAcc": {
                    "description": "Accuracy of the user's altitude, in meters. (Does not currently affect search results.)",
                    "location": "query"
                },
                "query": {
                    "description": "A search term to be applied against titles. Must be at least 3 characters long.",
                    "location": "query",
                    "required": true
                },
                "limit": {
                    "description": "Number of results to return, up to 100.",
                    "location": "query"
                },
                "radius": {
                    "description": "Limit results to venues within this many meters of the specified location. Defaults to a city-wide area. The maximum supported radius is currently 80,000 meters.",
                    "location": "query"
                },
                "sw": {
                    "description": "With ne, limits results to the bounding quadrangle defined by the latitude and longitude given by sw as its south-west corner, and ne as its north-east corner. The bounding quadrangle is only supported for intent=browse searches. Not valid with ll or radius. Bounding quadrangles with an area up to approximately 10,000 square kilometers are supported.",
                    "location": "query"
                },
                "ne": {
                    "description": "See sw",
                    "location": "query"
                }
            },
            "uri": "venues/suggestcompletion",
            "responseModel": "getResponse"
        },
        "venues/timeseries": {
            "extends" : "abstract.foursquare",
            "description": "Get daily venue stats for a list of venues over a time range.",
            "httpMethod": "GET",
            "parameters": {
                "venueId": {
                    "description": "A comma-separated list of venue ids to retrieve series data for. The current user must be the manager of all venues specified.",
                    "location": "query"
                },
                "startAt": {
                    "description": "The start of the time range to retrieve stats for (seconds since epoch).",
                    "location": "query",
                    "required": true
                },
                "endAt": {
                    "description": "The end of the time range to retrieve stats for (seconds since epoch). If omitted, the current time is assumed.",
                    "location": "query"
                },
                "fields": {
                    "description": "Specifies which fields to return. May be one or more of totalCheckins, newCheckins, uniqueVisitors, sharing, genders, ages, hours, separated by commas.",
                    "location": "query"
                }
            },
            "uri": "venues/timeseries",
            "responseModel": "getResponse"
        },
        "venues/trending": {
            "extends" : "abstract.foursquare",
            "description": "Returns a list of venues near the current location with the most people currently checked in. ",
            "httpMethod": "GET",
            "parameters": {
                "ll": {
                    "description": "Latitude and longitude of the user's location.",
                    "location": "query",
                    "required": true
                },
                "limit": {
                    "description": "Number of results to return, up to 50.",
                    "location": "query"
                },
                "radius": {
                    "description": "Radius in meters, up to approximately 2000 meters.",
                    "location": "query"
                }
            },
            "uri": "venues/trending",
            "responseModel": "getResponse"
        },
        "venues/events": {
            "extends": "venues",
            "description": "Allows you to access information about the current events at a place. ",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/events",
            "responseModel": "getResponse"
        },
        "venues/herenow": {
            "extends": "venues",
            "description": "Provides a count of how many people are at a given venue. ",
            "httpMethod": "GET",
            "parameters": {
                "limit": {
                    "description": "Number of results to return, up to 500.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                }
            },
            "uri": "venues/{venue_id}/herenow",
            "responseModel": "getResponse"
        },
        "venues/hours": {
            "extends": "venues",
            "description": "Returns hours for a venue. ",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/hours",
            "responseModel": "getResponse"
        },
        "venues/likes": {
            "extends": "venues",
            "description": "Returns friends and a total count of users who have liked this venue.",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/likes",
            "responseModel": "getResponse"
        },
        "venues/links": {
            "extends": "venues",
            "description": "Returns URLs or identifiers from third parties that have been applied to this venue, such as how the New York Times refers to this venue and a URL for additional information from nytimes.com. This is part of the foursquare Venue Map.",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/links",
            "responseModel": "getResponse"
        },
        "venues/listed": {
            "extends": "venues",
            "description": "The lists that this venue appears on",
            "httpMethod": "GET",
            "parameters": {
                "group": {
                    "description": "can be created, edited, followed, friends, other. If no acting user is present, only other is supported.",
                    "location": "query"
                },
                "limit": {
                    "description": "Number of results to return, up to 200.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results. Must specify a group",
                    "location": "query"
                }
            },
            "uri": "venues/{venue_id}/listed",
            "responseModel": "getResponse"
        },
        "venues/menu": {
            "extends": "venues",
            "description": "",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/menu",
            "responseModel": "getResponse"
        },
        "venues/nextvenues": {
            "extends": "venues",
            "description": "Returns menu information for a venue.",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/nextvenues",
            "responseModel": "getResponse"
        },
        "venues/photos": {
            "extends": "venues",
            "description": "Returns photos for a venue.",
            "parameters": {
                "group": {
                    "description": "If not specified, public venue photos are returned ordered by relevance. Pass venue for public venue photos, ordered by recency. Pass checkin for venue photos from friends (including non-public photos from recent checkins), ordered by recency.",
                    "location": "query"
                },
                "limit": {
                    "description": "Number of results to return, up to 200.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                }
            },
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/photos",
            "responseModel": "getResponse"
        },
        "venues/similar": {
            "extends": "venues",
            "description": "Returns a list of venues similar to the specified venue.",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/similar",
            "responseModel": "getResponse"
        },
        "venues/stats": {
            "extends": "venues",
            "description": "Get venue stats over a given time range. Only available to the manager of a venue.",
            "parameters": {
                "startAt": {
                    "description": "he start of the time range to retrieve stats for (seconds since epoch). If omitted, all-time stats will be returned.",
                    "location": "query"
                },
                "endAt": {
                    "description": "The end of the time range to retrieve stats for (seconds since epoch). If omitted, the current time is assumed.",
                    "location": "query"
                }
            },
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/stats",
            "responseModel": "getResponse"
        },
        "venues/tips": {
            "extends": "venues",
            "description": "Returns tips for a venue. ",
            "parameters": {
                "sort": {
                    "description": "One of friends, recent, or popular.",
                    "location": "query"
                },
                "limit": {
                    "description": "Number of results to return, up to 500.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                }
            },
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/tips",
            "responseModel": "getResponse"
        },
        "venues/claim": {
            "extends": "venues",
            "description": "Allows the acting user to dislike or undo a previous dislike for a venue.",
            "parameters": {
                "visible": {
                    "default": true,
                    "description": "whether role as manager is visible on the venue page",
                    "location": "postField"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/claim",
            "responseModel": "getResponse"
        },
        "venues/dislike": {
            "extends": "venues",
            "description": "Allows the acting user to dislike or undo a previous dislike for a venue.",
            "parameters": {
                "set": {
                    "default": 1,
                    "description": "If 1, dislike this venue. If 0 undo a previous dislike for this venue. Default value is 1",
                    "location": "postField"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/dislike",
            "responseModel": "getResponse"
        },
        "venues/edit": {
            "extends": "venues",
            "description": "Allows you to make changes to a venue (acting user must be a superuser or venue manager). Any blank parameter deletes an old value, any unspecified parameter does nothing.",
            "parameters": {
                "name": {
                    "description": "The name of the venue.",
                    "location": "postField"
                },
                "address": {
                    "description": "The address of the venue.",
                    "location": "postField"
                },
                "crossStreet": {
                    "description": "The nearest intersecting street or streets.",
                    "location": "postField"
                },
                "city": {
                    "description": "The city name where this venue is.",
                    "location": "postField"
                },
                "state": {
                    "description": "The nearest state or province to the venue.",
                    "location": "postField"
                },
                "zip": {
                    "description": "The zip or postal code for the venue.",
                    "location": "postField"
                },
                "phone": {
                    "description": "The phone number of the venue.",
                    "location": "postField"
                },
                "ll": {
                    "description": "Latitude and longitude of the venue",
                    "location": "postField"
                },
                "categoryId": {
                    "description": "The IDs of the category or categories to which you want to assign this venue (separate multiple IDs with commas).",
                    "location": "postField"
                },
                "twitter": {
                    "description": "The twitter handle of the venue.",
                    "location": "postField"
                },
                "description": {
                    "description": "A freeform description of the venue, up to 300 characters.",
                    "location": "postField"
                },
                "url": {
                    "description": "The url of the homepage of the venue.",
                    "location": "postField"
                },
                "storeId": {
                    "description": "An identifier used by the manager of the venue to distinguish between venues of the same name. Only visible to managers.",
                    "location": "postField"
                },
                "hours": {
                    "description": "The hours for the venue, as a semi-colon separated list of open segments and named segments (e.g., brunch or happy hour). Open segments are formatted as day,start,end. Named segments additionally have a label, formatted as day,start,end,label. Days are formatted as integers with Monday = 1,...,Sunday = 7. Start and End are formatted as [+]HHMM format. Use 24 hour format (no colon), prefix with 0 for HH or MM less than 10. Use '+' prefix, i.e., +0230 to represent 2:30 am past midnight into the following day.",
                    "location": "postField"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/edit",
            "responseModel": "getResponse"
        },
        "venues/setsinglelocation": {
            "extends": "venues",
            "description": "Sets a venue as a single location (not part of a chain).",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/setsinglelocation",
            "responseModel": "getResponse"
        },
        "venues/flag": {
            "extends": "venues",
            "description": "Allows users to indicate a venue is incorrect in some way. ",
            "parameters": {
                "problem": {
                    "description": "One of mislocated, closed, duplicate, inappropriate, doesnt_exist, event_over",
                    "location": "postField",
                    "required": true
                },
                "venueId": {
                    "description": "ID of the duplicated venue (for problem duplicate)",
                    "location": "postField"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/flag",
            "responseModel": "getResponse"
        },
        "venues/like": {
            "extends": "venues",
            "description": "Allows the acting user to like or unlike a venue.",
            "parameters": {
                "set": {
                    "default": 1,
                    "description": "If 1, like this venue. If 0 unlike (un-do a previous like) it. Default value is 1.",
                    "location": "postField",
                    "required": true
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/like",
            "responseModel": "getResponse"
        },
        "venues/proposeedit": {
            "extends": "venues",
            "description": "Allows you to propose a change to a venue. ",
            "parameters": {
                "name": {
                    "description": "The name of the venue.",
                    "location": "postField"
                },
                "address": {
                    "description": "The address of the venue.",
                    "location": "postField"
                },
                "crossStreet": {
                    "description": "The nearest intersecting street or streets.",
                    "location": "postField"
                },
                "city": {
                    "description": "The city name where this venue is.",
                    "location": "postField"
                },
                "state": {
                    "description": "The nearest state or province to the venue.",
                    "location": "postField"
                },
                "zip": {
                    "description": "The zip or postal code for the venue.",
                    "location": "postField"
                },
                "phone": {
                    "description": "The phone number of the venue.",
                    "location": "postField"
                },
                "ll": {
                    "description": "Latitude and longitude of the venue",
                    "location": "postField"
                },
                "primaryCategoryId": {
                    "description": "The ID of the category to which you want to assign this venue.",
                    "location": "postField"
                },
                "hours": {
                    "description": "The hours for the venue, as a semi-colon separated list of open segments and named segments (e.g., brunch or happy hour). Open segments are formatted as day,start,end. Named segments additionally have a label, formatted as day,start,end,label. Days are formatted as integers with Monday = 1,...,Sunday = 7. Start and End are formatted as [+]HHMM format. Use 24 hour format (no colon), prefix with 0 for HH or MM less than 10. Use '+' prefix, i.e., +0230 to represent 2:30 am past midnight into the following day.",
                    "location": "postField"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/proposeedit",
            "responseModel": "getResponse"
        },
        "venues/setrole": {
            "extends": "venues",
            "description": "Sets a user's or page's role for a venue.",
            "parameters": {
                "userId": {
                    "description": "The id of the user or brand page for which we are changing roles at this venue",
                    "location": "postField",
                    "required": true
                },
                "role": {
                    "description": "One of the values below, indicating the role that the user should receive at the venue.",
                    "location": "postField",
                    "required": true
                },
                "visible": {
                    "description": "Determines whether managers are visible on the venue profile. Only applies to manager role.",
                    "location": "postField"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/setrole",
            "responseModel": "getResponse"
        },
        "venuegroups": {
            "extends" : "abstract.foursquare",
            "description": "Get venue group details.",
            "httpMethod": "GET",
            "parameters": {
                "group_id": {
                    "description": "The ID of the venue group to retrieve additional information for.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "venuegroups/{group_id}",
            "responseModel": "getResponse"
        },
        "venuegroups/add": {
            "extends" : "abstract.foursquare",
            "description": "Create a venue group. If the venueId parameter is specified, then the endpoint will add the specified venues to the venue group. If it is not possible to add all of the specified venues to the group, then creation of the venue group will fail entirely.",
            "httpMethod": "POST",
            "parameters": {
                "name": {
                    "description": "The name to give the group.",
                    "location": "postField",
                    "required": true
                },
                "venueId": {
                    "description": "Comma-delimited list of venue IDs to add to the group. If this parameter is not specified, then the venue group will initially be empty.",
                    "location": "postField"
                }
            },
            "uri": "venuegroups/add",
            "responseModel": "getResponse"
        },
        "venuegroups/delete": {
            "extends": "venuegroups",
            "description": "Delete a venue group.",
            "httpMethod": "POST",
            "uri": "venuegroups/{group_id}/delete",
            "responseModel": "getResponse"
        },
        "venuegroups/list": {
            "extends" : "abstract.foursquare",
            "description": "List all venue groups owned by the user.",
            "httpMethod": "POST",
            "uri": "venuegroups/list",
            "responseModel": "getResponse"
        },
        "venuegroups/timeseries": {
            "extends": "venuegroups",
            "description": "Get daily venue stats for the venues in a group over a time range.",
            "parameters": {
                "startAt": {
                    "description": "The start of the time range to retrieve stats for (seconds since epoch).",
                    "location": "query",
                    "required": true
                },
                "endAt": {
                    "description": "The end of the time range to retrieve stats for (seconds since epoch). If omitted, the current time is assumed.",
                    "location": "query"
                },
                "fields": {
                    "description": "Specifies which fields to return. May be one or more of totalCheckins, newCheckins, uniqueVisitors, sharing, genders, ages, hours, separated by commas.",
                    "location": "query"
                }
            },
            "uri": "venuegroups/{group_id}/timeseries",
            "responseModel": "getResponse"
        },
        "venuegroups/addvenue": {
            "extends": "venuegroups",
            "description": "Add a venue to a venue group.",
            "httpMethod": "POST",
            "parameters": {
                "venueId": {
                    "description": "comma-delimited list of venue IDs to add to the group",
                    "location": "postField",
                    "required": true
                }
            },
            "uri": "venuegroups/{group_id}/addvenue",
            "responseModel": "getResponse"
        },
        "venuegroups/edit": {
            "extends": "venuegroups",
            "description": "Allows you to make changes to all venues in a venue group. Acting user must be the owner of the group. Any blank parameter deletes an old value, any unspecified parameter does nothing.",
            "httpMethod": "POST",
            "parameters": {
                "name": {
                    "description": "The name of the venue.",
                    "location": "postField"
                },
                "city": {
                    "description": "The city name where this venue is.",
                    "location": "postField"
                },
                "state": {
                    "description": "The nearest state or province to the venue.",
                    "location": "postField"
                },
                "zip": {
                    "description": "The zip or postal code for the venue.",
                    "location": "postField"
                },
                "phone": {
                    "description": "The phone number for the venue.",
                    "location": "postField"
                },
                "categoryId": {
                    "description": "The IDs of the category or categories to which you want to assign this venue (separate multiple IDs with commas).",
                    "location": "postField"
                },
                "twitter": {
                    "description": "The twitter handle of the venue.",
                    "location": "postField"
                },
                "description": {
                    "description": "A freeform description of the venue, up to 300 characters.",
                    "location": "postField"
                },
                "url": {
                    "description": "The url of the homepage of the venue.",
                    "location": "postField"
                },
                "hours": {
                    "description": "The hours for the venue, as a semi-colon separated list of open segments and named segments (e.g., brunch or happy hour). Open segments are formatted as day,start,end. Named segments additionally have a label, formatted as day,start,end,label. Days are formatted as integers with Monday = 1,...,Sunday = 7. Start and End are formatted as [+]HHMM format. Use 24 hour format (no colon), prefix with 0 for HH or MM less than 10. Use '+' prefix, i.e., +0230 to represent 2:30 am past midnight into the following day.",
                    "location": "postField"
                }
            },
            "uri": "venuegroups/{group_id}/edit",
            "responseModel": "getResponse"
        },
        "venuegroups/removevenue": {
            "extends": "venuegroups",
            "description": "Remove a venue from a venue group.",
            "httpMethod": "POST",
            "parameters": {
                "venueId": {
                    "description": "comma-delimited list of venue IDs to remove from the group",
                    "location": "postField",
                    "required": true
                }
            },
            "uri": "venuegroups/{group_id}/removevenue",
            "responseModel": "getResponse"
        },
        "venuegroups/update": {
            "extends": "venuegroups",
            "description": "Updates a venue group. At least one of the name and venueId parameters must be specified.",
            "httpMethod": "POST",
            "parameters": {
                "name": {
                    "description": "If specified, the new name to give to the group.",
                    "location": "postField"
                },
                "venueId": {
                    "description": "If specified, a comma-delimited list of venue IDs that will become the new set of venue IDs for the group.",
                    "location": "postField"
                }
            },
            "uri": "venuegroups/{group_id}/update",
            "responseModel": "getResponse"
        },
        "checkins": {
            "extends" : "abstract.foursquare",
            "description": "Get details of a checkin.",
            "httpMethod": "GET",
            "parameters": {
                "checkin_id": {
                    "description": "The ID of the checkin to retrieve additional information for.",
                    "location": "uri",
                    "required": true
                },
                "signature": {
                    "description": "When checkins are sent to public feeds, foursquare appends a signature allowing users to bypass the friends-only access check on checkins. The same value can be used here for programmatic access to otherwise inaccessible checkins.",
                    "location": "query"
                }
            },
            "uri": "checkins/{checkin_id}",
            "responseModel": "getResponse"
        },
        "checkins/add": {
            "extends" : "abstract.foursquare",
            "description": "Allows the acting user to check in to a place.",
            "httpMethod": "POST",
            "parameters": {
                "venueId": {
                    "description": "The venue where the user is checking in.",
                    "location": "postField",
                    "required": true
                },
                "eventId": {
                    "description": "The event the user is checking in to.",
                    "location": "postField",
                    "required": false
                },
                "shout": {
                    "description": "A message about your check-in. The maximum length of this field is 140 characters.",
                    "location": "postField",
                    "required": false
                },
                "mentions": {
                    "description": "Mentions in your check-in. This parameter is a semicolon-delimited list of mentions.",
                    "location": "postField",
                    "required": false
                },
                "broadcast": {
                    "description": "Who to broadcast this check-in to. Accepts a comma-delimited list of values.",
                    "location": "postField",
                    "required": false
                },
                "ll": {
                    "description": "Latitude and longitude of the user's location. Only specify this field if you have a GPS or other device reported location for the user at the time of check-in.",
                    "location": "postField",
                    "required": false
                },
                "llAcc": {
                    "description": "Accuracy of the user's latitude and longitude, in meters.",
                    "location": "postField",
                    "required": false
                },
                "alt": {
                    "description": "Altitude of the user's location, in meters.",
                    "location": "postField",
                    "required": false
                },
                "altAcc": {
                    "description": "Vertical accuracy of the user's location, in meters.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "checkins/add",
            "responseModel": "getResponse"
        },
        "checkins/resolve": {
            "extends" : "abstract.foursquare",
            "description": "Check-ins that are posted to public feeds such as Twitter do not reveal the associated check-in's ID. Use this endpoint to map from a check-in URL (e.g., https://www.swarmapp.com/c/fcP5m3yn7AL) to check-in details.",
            "httpMethod": "GET",
            "parameters": {
                "shortId": {
                    "description": "The short ID at the end of a swarmapp.com link, e.g., https://swarmapp.com/c/abc123ZYX",
                    "location": "query",
                    "required": true
                }
            },
            "uri": "checkins/resolve",
            "responseModel": "getResponse"
        },
        "checkins/recent": {
            "extends" : "abstract.foursquare",
            "description": "Returns a list of recent checkins from friends.",
            "httpMethod": "GET",
            "parameters": {
                "ll": {
                    "description": "Latitude and longitude of the user's location, so response can include distance.",
                    "location": "query",
                    "required": false
                },
                "limit": {
                    "description": "Number of results to return, up to 100.",
                    "location": "query",
                    "required": false
                },
                "afterTimestamp": {
                    "description": "Seconds after which to look for checkins, e.g. for looking for new checkins since the last fetch. If more than limit results are new since then, this is ignored. Checkins created prior to this timestamp will still be returned if they have new comments or photos, making it easier to poll for all new activity.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "checkins/recent",
            "responseModel": "getResponse"
        },
        "checkins/likes": {
            "extends": "checkins",
            "description": "Returns friends and a total count of users who have liked this checkin.",
            "httpMethod": "GET",
            "uri": "checkins/{checkin_id}/likes",
            "responseModel": "getResponse"
        },
        "checkins/addcomment": {
            "extends": "checkins",
            "description": "Comment on a check-in",
            "httpMethod": "POST",
            "parameters": {
                "text": {
                    "description": "The text of the comment, up to 200 characters.",
                    "location": "postField",
                    "required": false
                },
                "mentions": {
                    "description": "Mentions in your check-in. This parameter is a semicolon-delimited list of mentions. A single mention is of the form 'start,end,userid', where start is the index of the first character in the shout representing the mention, end is the index of the first character in the shout after the mention, and userid is the userid of the user being mentioned. Character indices in shouts are 0-based.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "checkins/{checkin_id}/addcomment",
            "responseModel": "getResponse"
        },
        "checkins/deletecomment": {
            "extends": "checkins",
            "description": "Remove a comment from a checkin, if the acting user is the author or the owner of the checkin.",
            "httpMethod": "POST",
            "parameters": {
                "commentId": {
                    "description": "The id of the comment to remove.",
                    "location": "postField",
                    "required": true
                }
            },
            "uri": "checkins/{checkin_id}/deletecomment",
            "responseModel": "getResponse"
        },
        "checkins/like": {
            "extends": "checkins",
            "description": "Allows the acting user to like or unlike a checkin.",
            "httpMethod": "POST",
            "parameters": {
                "set": {
                    "default": 1,
                    "description": "If 1, like this checkin. If 0 unlike (un-do a previous like) it. Default value is 1.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "checkins/{checkin_id}/like",
            "responseModel": "getResponse"
        },
        "checkins/addpost": {
            "extends": "checkins",
            "description": "Allows the acting user to like or unlike a checkin.",
            "httpMethod": "POST",
            "parameters": {
                "text": {
                    "description": "The text of the post, up to 200 characters.",
                    "location": "postField",
                    "required": false
                },
                "url": {
                    "description": "Link for more details. This page will be opened in an embedded web view in the foursquare application, unless contentId is specified and a native link handler is registered and present. We support the following URL schemes: http, https, foursquare, mailto, tel, and sms.",
                    "location": "postField",
                    "required": false
                },
                "contentId": {
                    "description": "Identifier for the post to be used in a native link, up to 50 characters. A url must also be specified in the request.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "checkins/{checkin_id}/addpost",
            "responseModel": "getResponse"
        },
        "tips": {
            "extends" : "abstract.foursquare",
            "description": "Gives details about a tip, including which users (especially friends) have marked the tip to-do.",
            "httpMethod": "GET",
            "parameters": {
                "tip_id": {
                    "description": "ID of tip to retrieve",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "tips/{tip_id}",
            "responseModel": "getResponse"
        },
        "tips/add": {
            "extends" : "abstract.foursquare",
            "description": "Allows you to add a new tip at a venue.",
            "httpMethod": "POST",
            "parameters": {
                "venueId": {
                    "description": "The venue where you want to add this tip.",
                    "location": "postField",
                    "required": true
                },
                "text": {
                    "description": "The text of the tip, up to 200 characters.",
                    "location": "postField",
                    "required": true
                },
                "url": {
                    "description": "A URL related to this tip.",
                    "location": "postField",
                    "required": false
                },
                "broadcast": {
                    "description": "Whether to broadcast this tip. Send twitter if you want to send to twitter, facebook if you want to send to facebook, or twitter,facebook if you want to send to both.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "tips/add",
            "responseModel": "getResponse"
        },
        "tips/likes": {
            "extends": "tips",
            "description": "Returns friends and a total count of users who have liked this tip.",
            "uri": "tips/{tip_id}/likes",
            "responseModel": "getResponse"
        },
        "tips/listed": {
            "extends": "tips",
            "description": "The lists that this tip appears on",
            "parameters": {
                "group": {
                    "description": "can be created, edited, followed, friends, other. If no acting user is present, only other is supported.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "tips/{tip_id}/listed",
            "responseModel": "getResponse"
        },
        "tips/saves": {
            "extends": "tips",
            "description": "Returns friends and a total count of users who have saved this tip.",
            "uri": "tips/{tip_id}/saves",
            "responseModel": "getResponse"
        },
        "tips/flag": {
            "extends": "tips",
            "description": "Allows the acting user to flag a tip as offensive, spam, or not relevant.",
            "httpMethod": "POST",
            "parameters": {
                "comment": {
                    "description": "A comment explaining the flag.",
                    "location": "postField",
                    "required": false
                },
                "problem": {
                    "description": "The specific problem with the tip. Must be one of 'offensive', 'spam', or 'nolongerrelevant'.",
                    "location": "postField",
                    "required": true
                }
            },
            "uri": "tips/{tip_id}/flag",
            "responseModel": "getResponse"
        },
        "tips/like": {
            "extends": "tips",
            "description": "Allows the acting user to like or unlike a tip.",
            "httpMethod": "POST",
            "parameters": {
                "set": {
                    "default": 1,
                    "description": "If 1, like this tip. If 0 unlike (un-do a previous like) it. Default value is 1",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "tips/{tip_id}/like",
            "responseModel": "getResponse"
        },
        "tips/unmark": {
            "extends": "tips",
            "description": "Allows you to remove a tip from your to-do list.",
            "httpMethod": "POST",
            "uri": "tips/{tip_id}/unmark",
            "responseModel": "getResponse"
        },
        "lists": {
            "extends" : "abstract.foursquare",
            "description": "Gives details about a list.",
            "httpMethod": "GET",
            "parameters": {
                "list_id": {
                    "description": "id for a user-created (e.g. /v2/lists/12381902N) or followed list or one of either USER_ID/tips (e.g. /v2/lists/32/tips) or USER_ID/todos.",
                    "location": "uri",
                    "required": true
                },
                "limit": {
                    "description": "Number of results to return, up to 200.",
                    "location": "query",
                    "required": false
                },
                "offset": {
                    "description": "The number of results to skip. Used to page through results.",
                    "location": "query",
                    "required": false
                },
                "llBounds": {
                    "description": "optional Restricts the returned results to the input bounding box.",
                    "location": "query",
                    "required": false
                },
                "categoryId": {
                    "description": "optional Restricts the returned results to venues matching the input category id.",
                    "location": "query",
                    "required": false
                },
                "sort": {
                    "description": "optional Sorts the list items. Possible values are recent and nearby. recent sorts the list items by the date added to the list. nearby sorts the list items by the distance from the center of the provided llBounds.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "lists/{list_id}",
            "responseModel": "getResponse"
        },
        "lists/add": {
            "extends" : "abstract.foursquare",
            "description": "Allows users to create a new list.",
            "httpMethod": "POST",
            "parameters": {
                "name": {
                    "description": "The name of the list.",
                    "location": "postField",
                    "required": true
                },
                "description": {
                    "description": "The description of the list.",
                    "location": "postField",
                    "required": false
                },
                "collaborative": {
                    "description": "Boolean indicating if this list can be edited by friends.",
                    "location": "postField",
                    "required": false
                },
                "photoId": {
                    "description": "The id of a photo that should be set as the list photo.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "lists/add",
            "responseModel": "getResponse"
        },
        "lists/followers": {
            "extends" : "abstract.foursquare",
            "description": "Returns a count and items of users following this list.",
            "httpMethod": "POST",
            "parameters": {
                "list_id": {
                    "description": "id for a user-created list",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "lists/{list_id}/followers",
            "responseModel": "getResponse"
        },
        "lists/saves": {
            "extends" : "abstract.foursquare",
            "description": "Returns friends and a total count of users who have saved this list.",
            "httpMethod": "GET",
            "parameters": {
                "list_id": {
                    "description": "The ID of the list to get saves for.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "lists/{list_id}/saves",
            "responseModel": "getResponse"
        },
        "lists/items": {
            "extends" : "abstract.foursquare",
            "description": "Returns friends and a total count of users who have saved this list.",
            "httpMethod": "GET",
            "parameters": {
                "list_id": {
                    "description": "id for a user-created or followed list.",
                    "location": "uri",
                    "required": true
                },
                "item_id": {
                    "description": "id for an item in the parent list.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "lists/{list_id}/{item_id}",
            "responseModel": "getResponse"
        },
        "lists/suggestphoto": {
            "extends": "lists/saves",
            "description": "Suggests photos that may be appropriate for this item.",
            "httpMethod": "GET",
            "parameters": {
                "itemId": {
                    "description": "id of item on this list.",
                    "location": "query",
                    "required": true
                }
            },
            "uri": "lists/{list_id}/suggestphoto",
            "responseModel": "getResponse"
        },
        "lists/suggesttip": {
            "extends": "lists/suggestphoto",
            "description": "Suggests tips that may be appropriate for this item",
            "httpMethod": "GET",
            "parameters": {
                "itemId": {
                    "description": "id of item on this list.",
                    "location": "query",
                    "required": true
                }
            },
            "uri": "lists/{list_id}/suggesttip",
            "responseModel": "getResponse"
        },
        "lists/suggestvenues": {
            "extends": "lists/saves",
            "description": "Suggests venues that may be appropriate for this list.",
            "httpMethod": "GET",
            "uri": "lists/{list_id}/suggestvenues",
            "responseModel": "getResponse"
        },
        "lists/additem": {
            "extends": "lists/followers",
            "description": "Allows you to add an item to a list.",
            "httpMethod": "POST",
            "parameters": {
                "venueId": {
                    "description": "optional A venue to add to the list.",
                    "location": "postField",
                    "required": false
                },
                "text": {
                    "description": "optional If the target is a user-created list, this will create a public tip on the venue. If the target is /userid/todos, the text will be a private note that is only visible to the author.",
                    "location": "postField",
                    "required": false
                },
                "url": {
                    "description": "optional If adding a new tip via text, this can associate a url with the tip.",
                    "location": "postField",
                    "required": false
                },
                "tipId": {
                    "description": "optional Used to add a tip to a list. Cannot be used in conjunction with the text and url fields.",
                    "location": "postField",
                    "required": false
                },
                "listId": {
                    "description": "optional Used in conjuction with itemId, the id for a user created or followed list as well as one of either USER_ID/tips or USER_ID/todos.",
                    "location": "postField",
                    "required": false
                },
                "itemId": {
                    "description": "optional Used in conjuction with listId, the id of an item on that list that we wish to copy to this list.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "lists/{list_id}/additem",
            "responseModel": "getResponse"
        },
        "lists/deleteitem": {
            "extends": "lists/followers",
            "description": "Allows you to delete items from a list. One of itemId, venueId, or tipId must be provided.",
            "httpMethod": "POST",
            "parameters": {
                "itemId": {
                    "description": "optional id of the item to delete.",
                    "location": "postField",
                    "required": false
                },
                "venueId": {
                    "description": "optional id of a venue to be deleted. If the venue is on the list multiple times, e.g. multiple tips at the same venue, all items will be removed.",
                    "location": "postField",
                    "required": false
                },
                "tipId": {
                    "description": "optional id of a tip to be deleted.",
                    "location": "postField",
                    "required": false
                }

            },
            "uri": "lists/{list_id}/deleteitem",
            "responseModel": "getResponse"
        },
        "lists/follow": {
            "extends": "lists/followers",
            "description": "Allows you to follow a list.",
            "httpMethod": "POST",
            "uri": "lists/{list_id}/follow",
            "responseModel": "getResponse"
        },
        "lists/moveitem": {
            "extends": "lists/followers",
            "description": "Allows you to move an item on a list. One of beforeId or afterId must be specified.",
            "httpMethod": "POST",
            "parameters": {
                "itemId": {
                    "description": "id of the item on this list to move",
                    "location": "postField",
                    "required": true
                },
                "beforeId": {
                    "description": "optional Move itemId before beforeId.",
                    "location": "postField",
                    "required": false
                },
                "afterId": {
                    "description": "optional Move itemId after afterId.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "lists/{list_id}/moveitem",
            "responseModel": "getResponse"
        },
        "lists/share": {
            "extends": "lists/followers",
            "description": "Share a user-created list to twitter or facebook.",
            "httpMethod": "POST",
            "parameters": {
                "broadcast": {
                    "description": "Where to broadcast this list. Send twitter if you want to send to twitter, facebook if you want to send to facebook, or twitter,facebook if you want to send to both.",
                    "location": "postField",
                    "required": false
                },
                "message": {
                    "description": "optional A personal note to include with the share.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "lists/{list_id}/share",
            "responseModel": "getResponse"
        },
        "lists/unfollow": {
            "extends": "lists/followers",
            "description": "Allows you to unfollow a list.",
            "httpMethod": "POST",
            "uri": "lists/{list_id}/unfollow",
            "responseModel": "getResponse"
        },
        "lists/update": {
            "extends": "lists/followers",
            "description": "Allows you to update a list.",
            "httpMethod": "POST",
            "parameters": {
                "name": {
                    "description": "If present and a non-empty value, updates the List name.",
                    "location": "postField",
                    "required": false
                },
                "description": {
                    "description": "If present and a non-empty value, updates the List description. If present and empty, will remove the List description.",
                    "location": "postField",
                    "required": false
                },
                "collaborative": {
                    "description": "Boolean indicating if this list can be edited by friends. Once this has been set to true for a list, authenticated friends can edit the list via additem, deleteitem, etc.",
                    "location": "postField",
                    "required": false
                },
                "photoId": {
                    "description": "If present and a non-empty value, updates the List photo. If present and empty, will remove the List photo.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "lists/{list_id}/update",
            "responseModel": "getResponse"
        },
        "lists/updateitem": {
            "extends": "lists/followers",
            "description": "Allows you to add or remove photos and tips from items on user-created lists. ",
            "httpMethod": "POST",
            "parameters": {
                "itemId": {
                    "description": "required The id of an item on this list.",
                    "location": "postField",
                    "required": true
                },
                "tipId": {
                    "description": "optional If present and a non-empty value, adds or replaces a tip on this item. If present and empty, will remove the tip on this item.",
                    "location": "postField",
                    "required": false
                },
                "text": {
                    "description": "optional If present creates a public tip on the venue and replaces any existing tip on the item. Cannot be used in conjuction with tipId or photoId.",
                    "location": "postField",
                    "required": false
                },
                "url": {
                    "description": "optional If adding a new tip via text, this can associate a url with the tip.",
                    "location": "postField",
                    "required": false
                },
                "photoId": {
                    "description": "optional If present and a non-empty value, adds a photo to this item. If present and empty, will remove the photo on this item. If the photo was a private checkin photo, it will be promoted to a public venue photo.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "lists/{list_id}/updateitem",
            "responseModel": "getResponse"
        },
        "updates": {
            "extends" : "abstract.foursquare",
            "httpMethod": "GET",
            "parameters": {
                "update_id": {
                    "description": "required The ID of the update to retrieve",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "updates/{update_id}",
            "responseModel": "getResponse"
        },
        "updates/notifications": {
            "extends" : "abstract.foursquare",
            "description": "Retrieve a user's notification tray notifications",
            "httpMethod": "GET",
            "parameters": {
                "limit": {
                    "description": "Maximum number of results to return, up to 99. Notifications are grouped over time, so there will usually be fewer than 99 results available at any given time. offset 0 Used to page through results. Only the 99 most recent notifications are visible, so offset must be no more than 99 - limit.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "updates/notifications",
            "responseModel": "getResponse"
        },
        "updates/marknotificationsread": {
            "extends" : "abstract.foursquare",
            "description": "Mark notification tray notifications as read up, to a certain timestamp.",
            "httpMethod": "POST",
            "parameters": {
                "highWatermark": {
                    "description": "required The timestamp of the most recent notification that the user viewed.",
                    "location": "postField",
                    "required": true
                }
            },
            "uri": "updates/marknotificationsread",
            "responseModel": "getResponse"
        },
        "photos": {
            "extends" : "abstract.foursquare",
            "description": "Get details of a photo.",
            "httpMethod": "GET",
            "parameters": {
                "photo_id": {
                    "description": "required The ID of the photo to retrieve additional information for.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "photos/{photo_id}",
            "responseModel": "getResponse"
        },
        "photos/add": {
            "extends" : "abstract.foursquare",
            "description": "Allows users to add a new photo to a checkin, tip, venue, or page update in general.",
            "httpMethod": "POST",
            "parameters": {
                "checkinId": {
                    "description": "the ID of a checkin owned by the user.",
                    "location": "postField",
                    "required": false
                },
                "tipId": {
                    "description": "the ID of a tip owned by the user.",
                    "location": "postField",
                    "required": false
                },
                "venueId": {
                    "description": "the ID of a venue, provided only when adding a public photo of the venue in general, rather than a photo for a private checkin, tip, or page update.",
                    "location": "postField",
                    "required": false
                },
                "pageId": {
                    "description": "the ID of a page, provided only when adding a photo that will be in an update for that page (no other ids should be specified).",
                    "location": "postField",
                    "required": false
                },
                "broadcast": {
                    "description": "Whether to broadcast this photo. Send twitter if you want to send to twitter, facebook if you want to send to facebook, or twitter,facebook if you want to send to both.",
                    "location": "postField",
                    "required": false
                },
                "public": {
                    "description": "When the checkinId is also provided (meaning this is a photo attached to a checkin), this parameter allows for making the photo public and viewable at the venue. Valid values are 1 and 0 (default).",
                    "location": "postField",
                    "required": false
                },
                "ll": {
                    "description": "Latitude and longitude of the user's location.",
                    "location": "postField",
                    "required": false
                },
                "llAcc": {
                    "description": "Accuracy of the user's latitude and longitude, in meters.",
                    "location": "postField",
                    "required": false
                },
                "alt": {
                    "description": "Altitude of the user's location, in meters.",
                    "location": "postField",
                    "required": false
                },
                "altAcc": {
                    "description": "Vertical accuracy of the user's location, in meters.",
                    "location": "postField",
                    "required": false
                },
                "postUrl": {
                    "description": "A link for more details about the photo. This page will be opened in an embedded web view in the foursquare application, unless contentId is specified and a native link handler is registered and present. We support the following URL schemes: http, https, foursquare, mailto, tel, and sms.",
                    "location": "postField",
                    "required": false
                },
                "postContentId": {
                    "description": "Identifier for the photo post to be used in a native link, up to 50 characters. A checkinId and postUrl must also be specified in the request.",
                    "location": "postField",
                    "required": false
                },
                "postText": {
                    "description": "Text for the photo post, up to 200 characters. A checkinId must also be specified in the request.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "photos/add",
            "responseModel": "getResponse"
        },
        "settings": {
            "extends" : "abstract.foursquare",
            "description": "Returns a setting for the acting user.",
            "httpMethod": "GET",
            "parameters": {
                "setting_id": {
                    "description": "The name of a setting.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "settings/{setting_id}",
            "responseModel": "getResponse"
        },
        "settings/all": {
            "extends" : "abstract.foursquare",
            "description": "Returns the settings of the acting user.",
            "httpMethod": "GET",
            "uri": "settings/all",
            "responseModel": "getResponse"
        },
        "settings/set": {
            "extends" : "abstract.foursquare",
            "description": "Change a setting for the given user.",
            "httpMethod": "POST",
            "parameters": {
                "setting_id": {
                    "description": "required Name of setting to change, sendMayorshipsToTwitter, sendBadgesToTwitter, sendMayorshipsToFacebook, sendBadgesToFacebook, receivePings, receiveCommentPings.",
                    "location": "uri",
                    "required": true
                },
                "value": {
                    "description": "required 1 for true, and 0 for false.",
                    "location": "postField",
                    "required": true
                }
            },
            "uri": "settings/{setting_id}/set",
            "responseModel": "getResponse"
        },
        "specials": {
            "extends" : "abstract.foursquare",
            "description": "Gives details about a special, including text and whether it is unlocked for the current or provided user.",
            "httpMethod": "GET",
            "parameters": {
                "special_id": {
                    "description": "required ID of special to retrieve",
                    "location": "uri",
                    "required": true
                },
                "venueId": {
                    "description": "required ID of a venue the special is running at",
                    "location": "query",
                    "required": true
                },
                "userId": {
                    "description": "ID of the user to check whether the special is unlocked for. Only available if the current user is the manager of the venue. If not provided, checks wher the special is unlocked for the current user.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "specials/{special_id}",
            "responseModel": "getResponse"
        },
        "specials/add": {
            "extends" : "abstract.foursquare",
            "description": "Allows you to create a new special.",
            "httpMethod": "POST",
            "parameters": {
                "name": {
                    "description": "A name for the special.",
                    "location": "postField",
                    "required": false
                },
                "text": {
                    "description": "Required. Maximum length of 200 characters.",
                    "location": "postField",
                    "required": true
                },
                "finePrint": {
                    "description": "Maximum length of 200 characters. Fine print, shown in small type on the special detail page.",
                    "location": "postField",
                    "required": false
                },
                "count1": {
                    "description": "Count for frequency, count, regular, swarm, friends, and flash specials",
                    "location": "postField",
                    "required": false
                },
                "type": {
                    "description": "Required. The type of special.",
                    "location": "postField",
                    "required": true
                },
                "offerId": {
                    "description": "Maximum length of 16 characters. Internal id in your 3rd party system.",
                    "location": "postField",
                    "required": false
                },
                "cost": {
                    "description": "The amount of money the user must spend to use this special in dollars and cents. For example, 5.50 meaning 5 dollars and 50 cents.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "specials/add",
            "responseModel": "getResponse"
        },
        "specials/list": {
            "extends" : "abstract.foursquare",
            "description": "List available specials.",
            "httpMethod": "GET",
            "parameters": {
                "venueId": {
                    "description": "comma-separated list of venue IDs; filters results to the specials assigned to the venue(s).",
                    "location": "query",
                    "required": false
                },
                "status": {
                    "description": "(optional, requires venueId) which specials to return: pending, active, expired, all",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "specials/list",
            "responseModel": "getResponse"
        },
        "specials/search": {
            "extends" : "abstract.foursquare",
            "description": "Returns a list of specials near the current location.",
            "httpMethod": "GET",
            "parameters": {
                "ll": {
                    "description": "Required. Latitude and longitude to search near.",
                    "location": "query",
                    "required": true
                },
                "radius": {
                    "description": "Limit results to venues within this many meters of the specified location. Defaults to a city-wide area.",
                    "location": "query",
                    "required": false
                },
                "llAcc": {
                    "description": "Accuracy of latitude and longitude, in meters.",
                    "location": "query",
                    "required": false
                },
                "alt": {
                    "description": "Altitude of the user's location, in meters.",
                    "location": "query",
                    "required": false
                },
                "altAcc": {
                    "description": "Accuracy of the user's altitude, in meters.",
                    "location": "query",
                    "required": false
                },
                "limit": {
                    "description": "Number of results to return, up to 50.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "specials/search",
            "responseModel": "getResponse"
        },
        "specials/flag": {
            "extends" : "abstract.foursquare",
            "description": "Allows users to indicate a Special is improper in some way.",
            "httpMethod": "POST",
            "parameters": {
                "id": {
                    "description": "required The id of the special being flagged",
                    "location": "uri",
                    "required": true
                },
                "venueId": {
                    "description": "required The id of the venue running the special.",
                    "location": "postField",
                    "required": true
                },
                "problem": {
                    "description": "required One of not_redeemable, not_valuable, other.",
                    "location": "postField",
                    "required": true
                },
                "text": {
                    "description": "Additional text about why the user has flagged this special",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "specials/{id}/flag",
            "responseModel": "getResponse"
        },
        "events": {
            "extends" : "abstract.foursquare",
            "description": "Get details of a event.",
            "httpMethod": "GET",
            "parameters": {
                "event_id": {
                    "description": "required The ID of the event to retrieve additional information for.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "events/{event_id}",
            "responseModel": "getResponse"
        },
        "events/categories": {
            "extends" : "abstract.foursquare",
            "description": "Returns a hierarchical list of categories applied to events. ",
            "httpMethod": "GET",
            "uri": "events/categories",
            "responseModel": "getResponse"
        },
        "events/search": {
            "extends" : "abstract.foursquare",
            "description": "This is an experimental API and subject to change or breakage.",
            "httpMethod": "GET",
            "parameters": {
                "domain": {
                    "description": "required Identifier for a known third-party event provider. This is used in conjunction with id. Currently songkick.com is the only supported value.",
                    "location": "query",
                    "required": true
                },
                "eventId": {
                    "description": "required Identifier used by third-party specifed in domain, which we will attempt to match against our events listings. eventId is the id of an event, participantId is the id of a participant, like a band or sports team.",
                    "location": "query",
                    "required": false
                },
                "participantId": {
                    "description": "required Identifier used by third-party specifed in domain, which we will attempt to match against our events listings. eventId is the id of an event, participantId is the id of a participant, like a band or sports team.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "events/search",
            "responseModel": "getResponse"
        },
        "events/add": {
            "extends" : "abstract.foursquare",
            "description": "Create an event for a venue that you manage. You can see all your events in the tools tab when you're managing your venue. They're on the calendar. Events show up when users view your venue on mobile or the web. Users can also check in to events and share with their friends what they're up to in the present moment, and look back to see what they did in the days of yore.",
            "httpMethod": "POST",
            "parameters": {
                "venueId": {
                    "description": "The id of the venue where the event is being held.",
                    "location": "postField",
                    "required": false
                },
                "name": {
                    "description": "The name of the event.",
                    "location": "postField",
                    "required": false
                },
                "startAt": {
                    "description": "Time when the event is scheduled to start, in seconds since Unix epoch.",
                    "location": "postField",
                    "required": false
                },
                "endAt": {
                    "description": "Time when the event is scheduled to end, in seconds since Unix epoch.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "events/add",
            "responseModel": "getResponse"
        },
        "pages": {
            "extends" : "abstract.foursquare",
            "description": "Returns user details for a page. Will return error if user specified is not a page.",
            "httpMethod": "GET",
            "parameters": {
                "user_id": {
                    "description": "Identity of the page to get details for.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "pages/{user_id}",
            "responseModel": "getResponse"
        },
        "pages/add": {
            "extends" : "abstract.foursquare",
            "description": "Allows users to create a new page. The creating user is added as a manager of the new page.",
            "httpMethod": "POST",
            "parameters": {
                "name": {
                    "description": "required the name of the page",
                    "location": "postField",
                    "required": true
                }
            },
            "uri": "pages/add",
            "responseModel": "getResponse"
        },
        "pages/managing": {
            "extends" : "abstract.foursquare",
            "description": "Returns an array of the pages a user manages.",
            "httpMethod": "GET",
            "uri": "pages/managing",
            "responseModel": "getResponse"
        },
        "pages/similar": {
            "extends": "pages",
            "description": "Returns a list of pages similar to the specified page.",
            "httpMethod": "GET",
            "parameters": {
                "limit": {
                    "description": "Number of results to return, up to 500.",
                    "location": "query",
                    "required": false
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query",
                    "required": false
                },
                "includeFollowing": {
                    "description": "Boolean indicating whether results include pages already being followed by the user.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "pages/{user_id}/similar",
            "responseModel": "getResponse"
        },
        "pages/timeseries": {
            "extends" : "abstract.foursquare",
            "description": "Get daily venue stats for venues managed by a page over a time range.",
            "httpMethod": "GET",
            "parameters": {
                "page_id": {
                    "description": "The page whose venues to get timeseries data for",
                    "location": "uri",
                    "required": true
                },
                "startAt": {
                    "description": "required. The start of the time range to retrieve stats for (seconds since epoch).",
                    "location": "query",
                    "required": false
                },
                "endAt": {
                    "description": "The end of the time range to retrieve stats for (seconds since epoch). If omitted, the current time is assumed.",
                    "location": "query",
                    "required": false
                },
                "fields": {
                    "description": "Specifies which fields to return. May be one or more of totalCheckins, newCheckins, uniqueVisitors, sharing, genders, ages, hours, separated by commas.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "pages/{page_id}/timeseries",
            "responseModel": "getResponse"
        },
        "pages/access": {
            "extends": "pages",
            "description": "Returns an OAuth access token for the specified page. The requesting user must be a manager of the page.",
            "httpMethod": "GET",
            "uri": "pages/{user_id}/access",
            "responseModel": "getResponse"
        },
        "pages/venues": {
            "extends" : "abstract.foursquare",
            "description": "Allows you to get the page's venues.",
            "httpMethod": "GET",
            "parameters": {
                "page_id": {
                    "description": "The page id for which venues are being requested.",
                    "location": "uri",
                    "required": true
                },
                "ll": {
                    "description": "optional Not valid with ne or sw. Limits results to venues near this latitude and longitude within an optional radius.",
                    "location": "query",
                    "required": false
                },
                "radius": {
                    "description": "optional Can be used when including ll. Not valid with ne or sw. Limit results to venues within this many meters of the specified ll. The maximum supported radius is currently 100,000 meters.",
                    "location": "query",
                    "required": false
                },
                "sw": {
                    "description": "With ne, limits results to the bounding quadrangle defined by the latitude and longitude given by sw as its south-west corner, and ne as its north-east corner. Not valid with ll or radius. Bounding quadrangles with an area up to approximately 10,000 square kilometers are supported.",
                    "location": "query",
                    "required": false
                },
                "ne": {
                    "description": "See sw",
                    "location": "query",
                    "required": false
                },
                "offset": {
                    "description": "The offset of which venues to return. Defaults to 0.",
                    "location": "query",
                    "required": false
                },
                "limit": {
                    "description": "The number of venues to return. Defaults to 20, max of 100.",
                    "location": "query",
                    "required": false
                },
                "storeId": {
                    "description": "optional Only return venues whose storeId matches. storeIds are defined by the page manager (and therefore namespaced to that particular page). They are the page's own internal identifier for that venue. Cannot be used with any geo params.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "pages/{page_id}/venues",
            "responseModel": "getResponse"
        },
        "pages/follow": {
            "extends": "pages",
            "description": "Allows the acting user to follow or unfollow a page. Following a page subscribes the acting user to updates from that page.",
            "httpMethod": "POST",
            "parameters": {
                "set": {
                    "default": 1,
                    "description": "If 1, follow this page. If 0 unfollow (un-do a previous follow) it. Default value is 1.",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "pages/{user_id}/access",
            "responseModel": "getResponse"
        },
        "pageupdates": {
            "extends" : "abstract.foursquare",
            "description": "Get page update details.",
            "httpMethod": "GET",
            "parameters": {
                "update_id": {
                    "description": "The ID of the update to retrieve additional information for.",
                    "location": "uri",
                    "required": true
                },
                "limit": {
                    "description": "The number of nearby venues to show (default 20).",
                    "location": "query",
                    "required": false
                },
                "ll": {
                    "description": "The location of the current user.",
                    "location": "query",
                    "required": false
                }
            },
            "uri": "pageupdates/{update_id}",
            "responseModel": "getResponse"
        },
        "pageupdates/add": {
            "extends" : "abstract.foursquare",
            "description": "Broadcast an update as a page to followers of the page and associated venues. Venues can be specified either by the venueId, groupId or pageId (meaning all venues managed by the page) parameters. Broadcasts will show up in the Activity Stream (the Friends tab in the app) for any user who has either liked the page or any of the venues or has checked in enough times at any of the venues AND is in the same city as one of the venues associated with the broadcast. A broadcast can contain any combination of a shout, a special and photos, but at least one of the three must be specified. The API enforces a rate limit of at most one broadcast sent by a given user to the same set of venues in 15 minutes. This rate may change and is stricter for larger sets of venues.",
            "httpMethod": "POST",
            "parameters": {
                "pageId": {
                    "description": "required id of the page to associate with the broadcast. To find the page for a venue you can look at the page object in the venue response.",
                    "location": "postField",
                    "required": true
                },
                "groupId": {
                    "description": "The venue group from which to broadcast an update.",
                    "location": "postField",
                    "required": false
                },
                "venueId": {
                    "description": "A comma-separated list of venue IDs indicated which venues to broadcast from.",
                    "location": "postField",
                    "required": false
                },
                "shout": {
                    "description": "Optional text associated with the broadcast. 160 characters max.",
                    "location": "postField",
                    "required": false
                },
                "photoId": {
                    "description": "An optional photo to attach to the broadcast. For a new photo, you should use the photo add endpoint and specify only the pageId parameter.",
                    "location": "postField",
                    "required": false
                },
                "broadcast": {
                    "description": "Additional places to send the broadcast to. Accepts a comma-delimited list of values",
                    "location": "postField",
                    "required": false
                }
            },
            "uri": "pageupdates/add",
            "responseModel": "getResponse"
        },
        "pageupdates/list": {
            "extends" : "abstract.foursquare",
            "description": "Returns a list of page updates created by the current user.",
            "httpMethod": "GET",
            "uri": "pageupdates/list",
            "responseModel": "getResponse"
        },
        "pageupdates/delete": {
            "extends" : "abstract.foursquare",
            "description": "Delete a page update created by the current user.",
            "httpMethod": "POST",
            "parameters": {
                "update_id": {
                    "description": "The ID of the update to delete.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "pageupdates/{update_id}/delete",
            "responseModel": "getResponse"
        },
        "pageupdates/like": {
            "extends" : "abstract.foursquare",
            "description": "Causes the current user to 'like' a page update. If there is a campaign associated with the update, the like will propagate to the special as well.",
            "httpMethod": "POST",
            "parameters": {
                "update_id": {
                    "description": "The ID of the update to like.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "pageupdates/{update_id}/like",
            "responseModel": "getResponse"
        },
        "multi": {
            "extends" : "abstract.foursquare",
            "description": "Does multiple (up to 5) requests at once. If specifying a v=YYYYMMDD param, be sure to use it for the top-level",
            "httpMethod": "GET",
            "parameters": {
                "requests": {
                    "description": "required A comma-delimited list of API requests.",
                    "location": "query",
                    "required": true
                }
            },
            "uri": "multi",
            "responseModel": "getResponse"
        },
        "multi/post": {
            "extends": "multi",
            "httpMethod": "POST",
            "parameters": {
                "requests": {
                    "location": "postField"
                }
            }
        }
    }
}